<schemaSpec xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0">
    <title>EDEp - clean-up</title>

    <elementSpec ident="*" mode="add">
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="ab" mode="add">
        <model predicate="not(text())" behaviour="omit">
            <desc>Delete when empty</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="author" mode="add">
        <model predicate="string-length(.) eq 0" behaviour="omit"/>
    </elementSpec>
    <elementSpec ident="dimensions" mode="add">
        <model predicate="(string-length(width) eq 0) and (string-length(height) eq 0) and (string-length(depth) eq 0)" behaviour="omit">
            <desc>Delete element if all children are empty</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="div" mode="add">
        <model predicate="deep-equal(., following-sibling::*)" behaviour="omit">
            <desc>Delete when empty</desc>
        </model>
        <model predicate="node() and (@type eq 'commentary') and not(descendant::p) and not(descendant::ab)" behaviour="inline">
            <desc>Wrap commentary content in ab element (if there aren’t p or ab elements)</desc>
            <pb:template xml:space="preserve" xmlns=""><div xmlns="http://www.tei-c.org/ns/1.0" type="commentary"><ab>[[content]]</ab></div></pb:template>
        </model>
        <model predicate="node() and (@type eq 'translation') and not(descendant::p) and not(descendant::ab)" behaviour="inline">
            <desc>Wrap translation content in ab element (if there aren’t p or ab
                        elements)</desc>
            <param name="corresp" value="@corresp"/>
            <param name="resp" value="@resp"/>
            <pb:template xml:space="preserve" xmlns=""><div xmlns="http://www.tei-c.org/ns/1.0" type="translation" corresp="[[corresp]]" resp="[[resp]]"><ab>[[content]]</ab></div></pb:template>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="facsimile" mode="add">
        <model predicate="not(graphic[@url])" behaviour="omit">
            <desc>Omit element if it doesn’t contain a child graphic element with @url</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="idno" mode="add">
        <model predicate="(@type eq 'TM') and (string-length(.) eq 0)" behaviour="omit">
            <desc>Delete TM identifier if empty.</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="keywords" mode="add">
        <model predicate="not(descendant::term/node()) or not(descendant::term[@ref ne ''])" behaviour="omit">
            <desc>Delete when empty</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="layoutDesc" mode="add">
        <model predicate="not(descendant::height/text()) and not(descendant::width/text()) and not(descendant::ab/text()) and (descendant::rs/@ref = '') " behaviour="omit">
            <desc>Delete layoutDesc with empty children</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="listBibl" mode="add">
        <model predicate="not(bibl)" behaviour="omit">
            <desc>Clean-up of an empty listBibl element</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="material" mode="add">
        <model predicate="@ref eq ''" behaviour="omit">
            <desc>Delete element material if attribute @ref is empty</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="msItem" mode="add">
        <model predicate="(@class eq '') and (@type eq '')" behaviour="inline">
            <desc>Clean-up of msItem: delete empty attributes @class and @type</desc>
            <pb:template xml:space="preserve" xmlns=""><msItem xmlns="http://www.tei-c.org/ns/1.0">[[content]]</msItem></pb:template>
        </model>
        <model predicate="(@class ne '') and (@type eq '')" behaviour="inline">
            <desc>Clean-up of msItem: delete empty attribute @type when @class has
                        contents</desc>
            <param name="class" value="@class"/>
            <pb:template xml:space="preserve" xmlns=""><msItem xmlns="http://www.tei-c.org/ns/1.0" class="[[class]]">[[content]]</msItem></pb:template>
        </model>
        <model predicate="(@class eq '') and (@type ne '')" behaviour="inline">
            <desc>Clean-up of msItem: delete empty attribute @class when @type has
                        contents</desc>
            <param name="type" value="@type"/>
            <pb:template xml:space="preserve" xmlns=""><msItem xmlns="http://www.tei-c.org/ns/1.0" type="[[type]]">[[content]]</msItem></pb:template>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="note" mode="add">
        <model predicate="not(node())" behaviour="omit">
            <desc>Delete any note element that doesn’t have textual content other than white spaces</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="objectType" mode="add">
        <model predicate="@ref eq ''" behaviour="omit">
            <desc>Delete element objectType if attribute @ref is empty</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="origDate" mode="add">
        <model predicate="@when-custom ne ''" behaviour="inline">
            <desc>Clean-up of element history/origin/origDate when a exact date is provided
                        (NB: chronological data is mandatory, thus the only clean-up action needed
                        is to delete unused attributes)</desc>
            <param name="when-custom" value="@when-custom"/>
            <param name="datingMethod" value="@datingMethod"/>
            <pb:template xml:space="preserve" xmlns=""><origDate xmlns="http://www.tei-c.org/ns/1.0" when-custom="[[when-custom]]" datingMethod="[[datingMethod]]">[[content]]</origDate></pb:template>
        </model>
        <model predicate="@notBefore-custom ne ''" behaviour="inline">
            <desc>Clean-up of element history/origin/origDate when a datation range is
                        provided</desc>
            <param name="notBefore-custom" value="@notBefore-custom"/>
            <param name="notAfter-custom" value="@notAfter-custom"/>
            <param name="datingMethod" value="@datingMethod"/>
            <pb:template xml:space="preserve" xmlns=""><origDate xmlns="http://www.tei-c.org/ns/1.0" notBefore-custom="[[notBefore-custom]]" notAfter-custom="[[notAfter-custom]]" datingMethod="[[datingMethod]]">[[content]]</origDate></pb:template>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="origin" mode="add">
        <model predicate="not(origDate) and (origPlace/string-length(@corresp) eq 0)" behaviour="omit">
            <desc>Delete element origin if empty children</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="physDesc" mode="add">
        <model predicate="parent::msDesc and descendant::objectType[@ref eq ''] and descendant::material[@ref eq ''] and descendant::note[string-length(replace(., '\s+', '')) eq 0]" behaviour="omit">
            <desc>Delete element physDesc if children are empty</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="provenance" mode="add">
        <model predicate="(@type eq 'history') and (string-length(.) eq 0)" behaviour="omit">
            <desc>Clean-up of element provenance[@type="history"] when empty</desc>
        </model>
        <model predicate="(@type eq 'found') and (@notBefore ne '') and (@when-custom eq '')" behaviour="inline">
            <desc>Clean-up of element provenance[@type="found"] when datation range is
                        provided</desc>
            <param name="notBefore" value="@notBefore"/>
            <param name="notAfter" value="@notAfter"/>
            <pb:template xml:space="preserve" xmlns=""><provenance xmlns="http://www.tei-c.org/ns/1.0" type="found" notBefore="[[notBefore]]" notAfter="[[notAfter]]">[[content]]</provenance></pb:template>
        </model>
        <model predicate="(@type eq 'found') and (@notBefore ne '') and (@when-custom ne '')" behaviour="inline">
            <desc>Clean-up of element provenance[@type="found"] when datation range is
                        provided, and field “Free form” is not empty</desc>
            <param name="notBefore" value="@notBefore"/>
            <param name="notAfter" value="@notAfter"/>
            <param name="when-custom" value="@when-custom"/>
            <pb:template xml:space="preserve" xmlns=""><provenance xmlns="http://www.tei-c.org/ns/1.0" type="found" notBefore="[[notBefore]]" notAfter="[[notAfter]]" when-custom="[[when-custom]]">[[content]]</provenance></pb:template>
        </model>
        <model predicate="(@type eq 'found') and (@when ne '') and (@when-custom eq '')" behaviour="inline">
            <desc>Clean-up of element provenance[@type="found"] when exact date is
                        provided</desc>
            <param name="when" value="@when"/>
            <pb:template xml:space="preserve" xmlns=""><provenance xmlns="http://www.tei-c.org/ns/1.0" type="found" when="[[when]]">[[content]]</provenance></pb:template>
        </model>
        <model predicate="(@type eq 'found') and (@when ne '') and (@when-custom ne '')" behaviour="inline">
            <desc>Clean-up of element provenance[@type="found"] when exact date is provided
                        and also @when-custom</desc>
            <param name="when" value="@when"/>
            <param name="when-custom" value="@when-custom"/>
            <pb:template xml:space="preserve" xmlns=""><provenance xmlns="http://www.tei-c.org/ns/1.0" type="found" when="[[when]]" when-custom="[[when-custom]]">[[content]]</provenance></pb:template>
        </model>
        <model predicate="(@type eq 'found') and (@when eq '') and (@notBefore eq '') and (@when-custom eq '')" behaviour="inline">
            <desc>Clean-up of element provenance[@type="found"] when there is no information
                        about the date (it’s expected to have a explanatory note about the
                        context)</desc>
            <pb:template xml:space="preserve" xmlns=""><provenance xmlns="http://www.tei-c.org/ns/1.0" type="found">[[content]]</provenance></pb:template>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="rs" mode="add">
        <model predicate="(@ref eq '') and not(text())" behaviour="omit">
            <desc>Delete rs elements with empty @ref and no textual content</desc>
        </model>
        <model predicate="(@ref eq '') and text()" behaviour="inline">
            <desc>Delete empty @ref attribute but keep element if there is textual content
                        (e.g. field “Paleography” empty but “Free form” not)</desc>
            <pb:template xml:space="preserve" xmlns=""><ref xmlns="http://www.tei-c.org/ns/1.0">[[content]]</ref></pb:template>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="textClass" mode="add">
        <model predicate="not(descendant::term/node()) or not(descendant::term[@ref ne ''])" behaviour="omit">
            <desc>Delete when empty (that is, any of the keywords elements contain
                        terms)</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
    <elementSpec ident="textLang" mode="add">
        <model predicate="count(tokenize(@mainLang, '\s+')) gt 1" behaviour="inline">
            <param name="mainLang" value="let $foreign := ancestor::TEI/descendant::div[@type eq 'edition']/descendant::foreign/@xml:lang for $x in tokenize(@mainLang, '\s+') return $x[not(. = $foreign)]"/>
            <param name="otherLangs" value="let $foreign := ancestor::TEI/descendant::div[@type eq 'edition']/descendant::foreign/@xml:lang for $x in tokenize(@mainLang, '\s+') return $x[. = $foreign]"/>
            <pb:template xml:space="preserve" xmlns=""><textLang xmlns="http://www.tei-c.org/ns/1.0" mainLang="[[mainLang]]" otherLangs="[[otherLangs]]"/></pb:template>
        </model>
        <model predicate="(@mainLang eq '') and (@otherLangs eq '')" behaviour="omit">
            <desc>Delete when attributes are empty</desc>
        </model>
        <model behaviour="copy"/>
    </elementSpec>
</schemaSpec>
