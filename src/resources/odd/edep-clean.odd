<?xml-model href="teipublisher_odds.xsd"?><?teipublisher output="tei"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>EDEp - clean-up</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under
                        GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions
                        GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify it under
                        the terms of the GNU General Public License as published by the Free
                        Software Foundation, either version 3 of the License, or (at your option)
                        any later version.</p>
                    <p>This program is distributed in the hope that it will be useful, but WITHOUT
                        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
                        FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
                        more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl/>
        </encodingDesc>
        <revisionDesc>
            <change when="2023-08-21Z">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body> </body>
        <schemaSpec start="TEI teiCorpus" ident="edep-clean">
            <elementSpec ident="*" mode="add">
                <model behaviour="copy"/>
            </elementSpec>
            
            <elementSpec ident="origDate" mode="add">
                <model predicate="@when-custom ne ''" behaviour="inline">
            <desc>Clean-up of element history/origin/origDate when a exact date is provided
                        (NB: chronological data is mandatory, thus the only clean-up action needed
                        is to delete unused attributes)</desc>
            <param name="when-custom" value="@when-custom"/>
            <param name="datingMethod" value="@datingMethod"/>
            <pb:template xmlns="" xml:space="preserve"><origDate xmlns="http://www.tei-c.org/ns/1.0" when-custom="[[when-custom]]" datingMethod="[[datingMethod]]">[[content]]</origDate></pb:template>
        </model>
                <model predicate="@notBefore-custom ne ''" behaviour="inline">
            <desc>Clean-up of element history/origin/origDate when a datation range is
                        provided</desc>
            <param name="notBefore-custom" value="@notBefore-custom"/>
            <param name="notAfter-custom" value="@notAfter-custom"/>
            <param name="datingMethod" value="@datingMethod"/>
            <pb:template xmlns="" xml:space="preserve"><origDate xmlns="http://www.tei-c.org/ns/1.0" notBefore-custom="[[notBefore-custom]]" notAfter-custom="[[notAfter-custom]]" datingMethod="[[datingMethod]]">[[content]]</origDate></pb:template>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="physDesc" mode="add">
                <model predicate="parent::msDesc and descendant::objectType[@ref eq ''] and descendant::material[@ref eq ''] and descendant::note[string-length(replace(., '\s+', '')) eq 0]" behaviour="omit">
            <desc>Delete element physDesc if children are empty</desc>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="objectType" mode="add">
                <model predicate="@ref eq ''" behaviour="omit">
            <desc>Delete element objectType if attribute @ref is empty</desc>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="material" mode="add">
                <model predicate="@ref eq ''" behaviour="omit">
            <desc>Delete element material if attribute @ref is empty</desc>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="note" mode="add">
                <model predicate="not(node())" behaviour="omit">
            <desc>Delete any note element that doesn’t have textual content other than white spaces</desc>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="idno" mode="add">
                <model predicate="(@type eq 'TM') and (string-length(.) eq 0)" behaviour="omit">
            <desc>Delete TM identifier if empty.</desc>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="origin" mode="add">
                <model predicate="not(origDate) and (origPlace/string-length(@corresp) eq 0)" behaviour="omit">
            <desc>Delete element origin if empty children</desc>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="provenance" mode="add">
                <model predicate="(@type eq 'found') and (@notBefore ne '') and (@when-custom eq '')" behaviour="inline">
            <desc>Clean-up of element provenance[@type="found"] when datation range is provided</desc>
            <param name="notBefore" value="@notBefore"/>
            <param name="notAfter" value="@notAfter"/>
            <pb:template xmlns="" xml:space="preserve"><provenance xmlns="http://www.tei-c.org/ns/1.0" type="found" notBefore="[[notBefore]]" notAfter="[[notAfter]]">[[content]]</provenance></pb:template>
        </model>
                <model predicate="(@type eq 'found') and (@notBefore ne '') and (@when-custom ne '')" behaviour="inline">
            <desc>Clean-up of element provenance[@type="found"] when datation range is
                        provided, and field “Free form” is not empty</desc>
            <param name="notBefore" value="@notBefore"/>
            <param name="notAfter" value="@notAfter"/>
            <param name="when-custom" value="@when-custom"/>
            <pb:template xmlns="" xml:space="preserve"><provenance xmlns="http://www.tei-c.org/ns/1.0" type="found" notBefore="[[notBefore]]" notAfter="[[notAfter]]" when-custom="[[when-custom]]">[[content]]</provenance></pb:template>
        </model>
                <model predicate="(@type eq 'found') and (@when ne '') and (@when-custom eq '')" behaviour="inline">
            <desc>Clean-up of element provenance[@type="found"] when exact date is
                        provided</desc>
            <param name="when" value="@when"/>
            <pb:template xmlns="" xml:space="preserve"><provenance xmlns="http://www.tei-c.org/ns/1.0" type="found" when="[[when]]">[[content]]</provenance></pb:template>
        </model>
                <model predicate="(@type eq 'found') and (@when ne '') and (@when-custom ne '')" behaviour="inline">
            <desc>Clean-up of element provenance[@type="found"] when exact date is provided
                        and also @when-custom</desc>
            <param name="when" value="@when"/>
            <param name="when-custom" value="@when-custom"/>
            <pb:template xmlns="" xml:space="preserve"><provenance xmlns="http://www.tei-c.org/ns/1.0" type="found" when="[[when]]" when-custom="[[when-custom]]">[[content]]</provenance></pb:template>
        </model>
                <model predicate="(@type eq 'found') and (@when eq '') and (@notBefore eq '') and (@when-custom eq '') and text()" behaviour="inline">
            <desc>Clean-up of element provenance[@type="found"] when there is no information about the date (it’s expected to have a explanatory note about the                        context)</desc>
            <pb:template xmlns="" xml:space="preserve"><provenance xmlns="http://www.tei-c.org/ns/1.0" type="found">[[content]]</provenance></pb:template>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="listBibl" mode="add">
                <model predicate="not(bibl)" behaviour="omit">
            <desc>Clean-up of an empty listBibl element</desc>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="msItem" mode="add">
                <model predicate="(@class eq '') and (@type eq '')" behaviour="inline">
            <desc>Clean-up of msItem: delete empty attributes @class and @type</desc>
            <pb:template xmlns="" xml:space="preserve"><msItem xmlns="http://www.tei-c.org/ns/1.0">[[content]]</msItem></pb:template>
        </model>
                <model predicate="(@class ne '') and (@type eq '')" behaviour="inline">
            <desc>Clean-up of msItem: delete empty attribute @type when @class has
                        contents</desc>
            <param name="class" value="@class"/>
            <pb:template xmlns="" xml:space="preserve"><msItem xmlns="http://www.tei-c.org/ns/1.0" class="[[class]]">[[content]]</msItem></pb:template>
        </model>
                <model predicate="(@class eq '') and (@type ne '')" behaviour="inline">
            <desc>Clean-up of msItem: delete empty attribute @class when @type has
                        contents</desc>
            <param name="type" value="@type"/>
            <pb:template xmlns="" xml:space="preserve"><msItem xmlns="http://www.tei-c.org/ns/1.0" type="[[type]]">[[content]]</msItem></pb:template>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="dimensions" mode="add">
                <model predicate="(string-length(width) eq 0) and (string-length(height) eq 0) and (string-length(depth) eq 0)" behaviour="omit">
            <desc>Delete element if all children are empty</desc>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="layoutDesc" mode="add">
                <model predicate="not(descendant::height/text()) and not(descendant::width/text()) and not(descendant::ab/text()) and (descendant::rs/@ref = '') " behaviour="omit">
            <desc>Delete layoutDesc with empty children</desc>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="rs" mode="add">
                <model predicate="(@ref eq '') and not(text())" behaviour="omit">
            <desc>Delete rs elements with empty @ref and no textual content</desc>
        </model>
                <model predicate="(@ref eq '') and text()" behaviour="inline">
            <desc>Delete empty @ref attribute but keep element if there is textual content
                        (e.g. field “Paleography” empty but “Free form” not)</desc>
            <pb:template xmlns="" xml:space="preserve"><ref xmlns="http://www.tei-c.org/ns/1.0">[[content]]</ref></pb:template>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="ab" mode="add">
                <model predicate="not(text())" behaviour="omit">
            <desc>Delete when empty</desc>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="textLang" mode="add">
                <model predicate="count(tokenize(@mainLang, '\s+')) gt 1" behaviour="inline">
            <param name="mainLang" value="let $foreign := ancestor::TEI/descendant::div[@type eq 'edition']/descendant::foreign/@xml:lang for $x in tokenize(@mainLang, '\s+') return $x[not(. = $foreign)]"/>
            <param name="otherLangs" value="let $foreign := ancestor::TEI/descendant::div[@type eq 'edition']/descendant::foreign/@xml:lang for $x in tokenize(@mainLang, '\s+') return $x[. = $foreign]"/>
            <pb:template xmlns="" xml:space="preserve"><textLang xmlns="http://www.tei-c.org/ns/1.0" mainLang="[[mainLang]]" otherLangs="[[otherLangs]]"/></pb:template>
        </model>
                <model predicate="(@mainLang eq '') and (@otherLangs eq '')" behaviour="omit">
            <desc>Delete when attributes are empty</desc>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="div" mode="add">
                <model predicate="deep-equal(., following-sibling::*)" behaviour="omit"/>
                <model behaviour="copy"/>
            </elementSpec>            
            <elementSpec ident="keywords" mode="add">
                <model predicate="not(*)" behaviour="inline">
            <param name="scheme" value="@scheme"/>
            <pb:template xmlns="" xml:space="preserve"><keywords xmlns="http://www.tei-c.org/ns/1.0" scheme="[[scheme]]"><term/></keywords></pb:template>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="facsimile" mode="add">
                <model predicate="not(graphic[@url])" behaviour="omit">
            <desc>Omit element if it doesn’t contain a child graphic element with @url</desc>
        </model>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="author" mode="add">
                <model predicate="string-length(.) eq 0" behaviour="omit"/>
            </elementSpec>
        <elementSpec ident="term" mode="add">
                <model predicate="not(@ref) and (following-sibling::term or preceding-sibling::term)" behaviour="omit"/>
                <model behaviour="copy"/>
            </elementSpec>
            <elementSpec ident="citedRange" mode="add">
                <model predicate="not(node())" behaviour="omit"/>
                <model behaviour="copy"/>
            </elementSpec>
        </schemaSpec>
    </text>
</TEI>