<?xml-model href="teipublisher_odds.xsd"?><?teipublisher output="web print"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>EDEp - edition</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref> </p>
                    <p>This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref> </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="edep.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2023-09-13Z">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="edep-output" source="edep.odd">
                <elementSpec ident="teiHeader" mode="change">
                    <model output="latex" behaviour="metadata"/>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" behaviour="pass-through">
            <param name="edep-id" value=".//msIdentifier/idno[@type='EDEp']/string()"/>
            <param name="title" value="fileDesc/titleStmt/title/node()"/>
            <param name="objectType" value=".//supportDesc/support/objectType"/>
            <param name="typeins" value=".//msContents/msItem"/>
            <param name="material" value=".//supportDesc/support/material"/>
            <param name="objectTypeDesc" value=".//supportDesc/support/note"/>
            <param name="support" value="(.//msPart/physDesc/objectDesc/supportDesc/condition, .//msPart/physDesc/objectDesc/supportDesc/support)"/>
            <param name="layout" value=".//msPart/physDesc/objectDesc/layoutDesc/layout"/>
            <param name="provenance" value=".//msPart/history/provenance[@type='found']"/>
            <param name="previousEditions" value=".//msPart//listBibl[@type='previousEditions']"/>
            <param name="language" value="$parameters?language"/>
            <param name="images" value=".//msPart//listBibl[@type='images']"/>
            <param name="fo-antik" value="let $id := .//msPart/history/origin/origPlace/@corresp let $place := collection($global:places)/id($id) return   $place/placeName[@type='ancient']/string()"/>
            <param name="fo-modern" value="let $id := .//msPart/history/origin/origPlace/@corresp let $place := collection($global:places)/id($id) return   $place/placeName[@type='modern']/string()"/>
            <param name="dating" value=".//msDesc/history/origin/origDate"/>
            <param name="place" value="let $id := .//msPart/history/origin/origPlace/@corresp return collection($global:places)/id($id)"/>
            <param name="findcontext" value=".//msPart/history/provenance[@type='found']/note"/>
            <param name="verification" value=".//msPart//note[@type='verification']"/>
            <pb:template xmlns="" xml:space="preserve">
                            <section lang="[[language]]">
                                <p>[[edep-id]]</p>
                                <h1>[[title]]</h1>
                                <ul>
                                  <li>[[objectType]]</li>
                                  <li>[[typeins]]</li>
                                  <li>[[fo-antik]]</li>
                                  <li>[[fo-modern]]</li>
                                  <li>[[dating]]</li>
                                </ul>
                                <p class="csep">[[objectType]] [[material]] [[objectTypeDesc]]</p>
                                <p class="csep">[[support]]</p>
                                <p class="csep">[[layout]]</p>
                                [[provenance]]
                                <p class="csep">[[place]][[findcontext]]</p>
                                [[previousEditions]]
                                [[verification]]
                                [[images]]
                            </section>
                        </pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="objectType" mode="add">
                    <model predicate="not(@ref) or @ref = ''" behaviour="inline">
            <pb:template xmlns="" xml:space="preserve"><span xml:space="preserve"><pb-i18n key="form.type-of-monument"/>  <pb-i18n key="form.unknown"/></span></pb:template>
        </model>
                    <model behaviour="inline">
            <param name="content" value="let $lang := replace($parameters?language, '([^-]+)-?.*$', '$1') let $ref := @ref return doc($global:data-root || &#34;/objtyp.xml&#34;)//*:term[@ref=$ref]/*:name[@xml:lang=$lang]/string()"/>
        </model>
                </elementSpec>
                <elementSpec ident="msItem" mode="add">
                    <model behaviour="inline">
            <param name="content" value="let $lang := replace($parameters?language, '([^-]+)-?.*$', '$1') let $ref := @class  return doc($global:data-root || &#34;/typeins.xml&#34;)//*:term[@ref=$ref]/*:name[@xml:lang=$lang]/string()"/>
        </model>
                </elementSpec>
                <elementSpec ident="material" mode="add">
                    <model behaviour="inline">
            <param name="content" value="let $lang := replace($parameters?language, '([^-]+)-?.*$', '$1') let $ref := @ref return doc($global:data-root || &#34;/material.xml&#34;)//*:term[@ref=$ref]/*:name[@xml:lang=$lang]/string()"/>
        </model>
                </elementSpec>
                <elementSpec ident="provenance" mode="add">
                    <model predicate="@notBefore or @notAfter" behaviour="block">
            <param name="content" value="@notBefore || '-' || @notAfter"/>
        </model>
                    <model predicate="@when or @when-custom" behaviour="block">
            <param name="content" value="(@when, @when-custom)[1]"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="rs" mode="change">
                    <model predicate="@type='metric' and .='partim'" behaviour="pass-through">
            <pb:template xmlns="" xml:space="preserve"><pb-i18n key="metric.partim"/></pb:template>
        </model>
                    <model predicate="@type='metric' and .='yes'" behaviour="pass-through">
            <pb:template xmlns="" xml:space="preserve"><pb-i18n key="form.metre"/></pb:template>
        </model>
                    <model predicate="@type='metric' and .=''" behaviour="pass-through">
            <pb:template xmlns="" xml:space="preserve"><span><pb-i18n key="form.metre"/> <pb-i18n key="form.unknown"/></span></pb:template>
        </model>
                    <model predicate="@type='metric'" behaviour="omit"/>
                    <model predicate="@type='decoration' and @ref='https://www.eagle-network.eu/voc/decor/lod/2000'" behaviour="pass-through">
            <pb:template xmlns="" xml:space="preserve"><pb-i18n key="form.decoration"/></pb:template>
        </model>
                    <model predicate="@type='decoration' and @ref='https://edep.adw.uni-heidelberg.de/decor/uncertain'" behaviour="pass-through">
            <pb:template xmlns="" xml:space="preserve"><span class="decor"><pb-i18n key="form.decoration"/> <pb-i18n key="decor.uncertain"/></span></pb:template>
        </model>
                    <model predicate="@type='decoration'" behaviour="omit"/>
                    <model predicate="@type='palaeography' and @ref" behaviour="inline">
            <param name="content" value="let $lang := replace($parameters?language, '([^-]+)-?.*$', '$1') let $ref := @ref return doc($global:app-root || &#34;/templates/fore/data/palaeographie.xml&#34;)//*:item[@ref=$ref]/*:name[@xml:lang=$lang]/string()"/>
        </model>
                    <model predicate="@type='ligature' and .='yes'" behaviour="inline">
            <pb:template xmlns="" xml:space="preserve"><pb-i18n key="form.ligature"/></pb:template>
        </model>
                    <model predicate="@type='ligature' and .=''" behaviour="inline">
            <pb:template xmlns="" xml:space="preserve"><span><pb-i18n key="form.ligature"/> <pb-i18n key="form.unknown"/></span></pb:template>
        </model>
                    <model predicate="@type='ligature'" behaviour="omit"/>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="support" mode="add">
                    <model behaviour="pass-through">
            <param name="content" value="(rs[@type='decoration'], dimensions)"/>
        </model>
                </elementSpec>
                <elementSpec ident="dimensions" mode="add">
                    <model behaviour="inline" cssClass="dimensions">
            <param name="content" value="string-join((width, height, depth), ' x ')"/>
        </model>
                </elementSpec>
                <elementSpec ident="condition" mode="add">
                    <model predicate=".=('complete', 'fragmentary')" behaviour="pass-through">
            <param name="key" value="'preservation.' || string(.)"/>
            <pb:template xmlns="" xml:space="preserve"><pb-i18n class="condition" key="[[key]]"/></pb:template>
        </model>
                    <model behaviour="pass-through">
            <pb:template xmlns="" xml:space="preserve"><span class="condition" xml:space="preserve"><pb-i18n key="form.preservation"/> <pb-i18n key="form.unknown"/></span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="body" mode="change">
                    <model behaviour="block" pb:mode="diplomatic">
            <param name="content" value=".//div[@type='edition']"/>
            <param name="translation" value=".//div[@type='translation']"/>
            <param name="commentary" value=".//div[@type='commentary']"/>
            <param name="apparatus" value=".//div[@type='apparatus']"/>
            <param name="dating" value="root(.)//msDesc/history/origin/origDate"/>
            <param name="language" value="root(.)//msPart/msContents/msItem/textLang"/>
            <param name="metric" value="root(.)//msPart/physDesc/objectDesc/layoutDesc/layout/rs[@type='metric']"/>
            <param name="bibliography" value="root(.)//msPart//listBibl[@type='bibliography']"/>
            <pb:template xmlns="" xml:space="preserve"><main>
  <!--h2><pb-i18n key="form.edition"/></h2-->
  <pb-tabs>
    <paper-tab slot="tab">Transcription</paper-tab>
    <paper-tab slot="tab">Diplomatic</paper-tab>
    [[content]]
  </pb-tabs>

  [[translation]]
  [[apparatus]]
  <p class="csep">[[language]][[metric]]</p>
  [[commentary]]
  [[dating]]
  [[bibliography]]
</main></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="TEI" mode="change">
                    <model predicate="@type='about'" behaviour="inline">
            <param name="content" value="text/body/div[starts-with($parameters?language, @xml:lang)]"/>
        </model>
                </elementSpec>
                <elementSpec ident="layout" mode="add">
                    <modelSequence>
            <model predicate="dimensions/(height|width)" behaviour="pass-through">
                <param name="dimensions" value="string-join(dimensions/(height, width) ! (., ' cm'), ' x ')"/>
                <pb:template xmlns="" xml:space="preserve"><span xml:space="preserve"><pb-i18n key="form.inscription-field"/>: [[dimensions]]</span></pb:template>
            </model>
            <model predicate="ab/node()" behaviour="inline">
                <param name="content" value="ab/node()"/>
            </model>
            <model predicate="rs[@type='palaeography']/@ref" behaviour="pass-through">
                <param name="paleo" value="rs[@type='palaeography']"/>
                <param name="content" value="rs[@type='palaeography']/string()"/>
                <pb:template xmlns="" xml:space="preserve"><span xml:space="preserve"><pb-i18n key="form.palaeography"/>: <span class="csep">[[paleo]]<span>[[content]]</span></span></span></pb:template>
            </model>
            <model predicate="ancestor::physDesc//dimensions[@type='letterHeight']/height/text()" behaviour="inline">
                <param name="content" value="ancestor::physDesc//dimensions[@type='letterHeight']/height/string()"/>
            </model>
            <model predicate="ancestor::physDesc//rs[@type='ligature']" behaviour="pass-through">
                <param name="content" value="ancestor::physDesc//rs[@type='ligature']"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="ex" mode="change">
                    <model predicate="$mode='diplomatic' and not(ancestor::choice) and not(following-sibling::abbr) and not(preceding-sibling::abbr)" behaviour="alternate" cssClass="choice">
            <param name="default" value="if (./@cert='low')  then ('(',., '?)') else ('(',., ')')"/>
            <param name="alternate" value="'.'"/>
        </model>
                    <model predicate="not(ancestor::choice) and not(following-sibling::abbr) and not(preceding-sibling::abbr)" behaviour="alternate" cssClass="choice">
            <param name="default" value="'.'"/>
            <param name="alternate" value="if (./@cert='low')  then ('(',., '?)') else ('(',., ')')"/>
        </model>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="parent::app" behaviour="inline"/>
                    <model predicate="@type='verification'" behaviour="pass-through">
            <desc>Verifizierung</desc>
            <param name="subtype" value="let $lang := replace($parameters?language, '([^-]+)-?.*$', '$1')  let $subtype := @subtype return    doc($global:data-root || &#34;/verification.xml&#34;)//*:option[@value=$subtype][@lang=$lang]/string()"/>
            <param name="date" value="date"/>
            <param name="who" value="persName"/>
            <pb:template xmlns="" xml:space="preserve"><p class="csep"><span>[[subtype]]</span>[[date]][[who]]</p></pb:template>
        </model>
                    <model predicate="parent::support or parent::provenance" behaviour="inline">
            <desc>note in support or provenance: add extra span to lower-case first letter via CSS.</desc>
            <pb:template xmlns="" xml:space="preserve"><span>[[content]]</span></pb:template>
        </model>
                    <model predicate="@place" behaviour="note">
            <param name="place" value="@place"/>
            <param name="label" value="@n"/>
        </model>
                    <model predicate="parent::div and not(@place)" behaviour="block">
            <outputRendition xml:space="preserve">
            margin-left: 10px;margin-right: 10px;
                            font-size:smaller;
            </outputRendition>
        </model>
                    <model predicate="not(@place)" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:" [";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:"] ";
            </outputRendition>
            <outputRendition xml:space="preserve">
            font-size:small;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="bibl" mode="change">
                    <model behaviour="pass-through">
            <param name="link" value="'https://api.zotero.org/groups/2519759/items/top?format=bib&amp;amp;tag=' || ptr/@target || '&amp;amp;style=digital-humanities-im-deutschsprachigen-raum&amp;amp;linkwrap=1'"/>
            <param name="citedRange" value="if (citedRange) then ' pp.' || citedRange else ()"/>
            <pb:template xmlns="" xml:space="preserve"><pb-load url="[[link]]" auto="" silent="" plain="" no-credentials=""/> <div>[[citedRange]]</div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="div" mode="change">
                    <modelSequence predicate="@type='commentary' and node()">
            <model behaviour="omit">
                <param name="level" value="2"/>
                <pb:template xmlns="" xml:space="preserve"><pb-i18n key="form.commentary">Commentary</pb-i18n></pb:template>
            </model>
            <model behaviour="body"/>
        </modelSequence>
                    <modelSequence predicate="@type='translation'">
            <model behaviour="omit">
                <param name="level" value="2"/>
                <pb:template xmlns="" xml:space="preserve"><pb-i18n key="form.translation"/></pb:template>
            </model>
            <model behaviour="block"/>
            <model behaviour="inline">
                <desc>Ausgabe des Übersetzers</desc>
                <param name="translator" value="@resp"/>
                <pb:template xmlns="" xml:space="preserve"><span>(<pb-i18n key="form.translation"/>: [[translator]])</span></pb:template>
            </model>
        </modelSequence>
                    <modelSequence predicate="@type=&#34;apparatus&#34; and node()">
            <model behaviour="omit">
                <param name="level" value="2"/>
                <pb:template xmlns="" xml:space="preserve"><pb-i18n key="form.apparatus">Apparatus</pb-i18n></pb:template>
            </model>
            <model behaviour="block"/>
        </modelSequence>
                    <modelSequence predicate="@type='edition'">
            <model behaviour="pass-through" pb:mode="diplomatic">
                <pb:template xmlns="" xml:space="preserve"><div slot="page" class="diplomatic">[[content]]</div></pb:template>
            </model>
            <model behaviour="pass-through" pb:mode="norm">
                <pb:template xmlns="" xml:space="preserve"><div slot="page" class="norm">[[content]]</div></pb:template>
            </model>
        </modelSequence>
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="choice" mode="change">
                    <model output="print" predicate="sic and corr" behaviour="inline">
            <param name="content" value="corr"/>
        </model>
                    <model output="print" predicate="abbr and expan" behaviour="inline">
            <param name="content" value="expan"/>
        </model>
                    <model output="print" predicate="orig and reg" behaviour="inline">
            <param name="content" value="reg"/>
        </model>
                    <model predicate="$parameters?mode='norm' and sic and corr" behaviour="alternate" cssClass="choice">
            <param name="default" value="sic"/>
            <param name="alternate" value="corr"/>
        </model>
                    <modelSequence predicate="sic and corr">
            <model behaviour="alternate" cssClass="choice">
                <param name="default" value="sic"/>
                <param name="alternate" value="corr"/>
            </model>
            <model behaviour="alternate" cssClass="choice-alternate">
                <param name="default" value="corr"/>
                <param name="alternate" value="sic"/>
            </model>
        </modelSequence>
                    <model predicate="$parameters?mode='norm' and abbr and expan" behaviour="alternate" cssClass="choice">
            <param name="default" value="expan"/>
            <param name="alternate" value="abbr"/>
        </model>
                    <modelSequence predicate="abbr and expan">
            <model behaviour="alternate" cssClass="choice">
                <param name="default" value="abbr"/>
                <param name="alternate" value="expan"/>
            </model>
            <model behaviour="alternate" cssClass="choice-alternate">
                <param name="default" value="expan"/>
                <param name="alternate" value="abbr"/>
            </model>
        </modelSequence>
                    <model predicate="$parameters?mode='norm' and orig and reg" behaviour="alternate" cssClass="choice">
            <param name="default" value="reg"/>
            <param name="alternate" value="orig"/>
        </model>
                    <modelSequence predicate="orig and reg">
            <model behaviour="alternate" cssClass="choice">
                <param name="default" value="orig"/>
                <param name="alternate" value="reg"/>
            </model>
            <model behaviour="alternate" cssClass="choice-alternate">
                <param name="default" value="reg"/>
                <param name="alternate" value="orig"/>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="origDate" mode="add">
                    <model predicate="text()" behaviour="inline">
            <desc>freie Angabe vorhanden</desc>
        </model>
                    <model predicate="@notBefore-custom or @notAfter-custom" behaviour="inline">
            <param name="content" value="format-number(number(@notBefore-custom), '0') || ' – ' || format-number(number(@notAfter-custom) ,'0')"/>
            <pb:template xmlns="" xml:space="preserve"><pb-i18n key="form.dating">Datierung</pb-i18n>: [[content]]</pb:template>
        </model>
                    <model behaviour="inline">
            <param name="content" value="format-number(number(@when-custom), '0')"/>
            <pb:template xmlns="" xml:space="preserve"><pb-i18n key="form.dating">Datierung</pb-i18n>: [[content]]</pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="textLang" mode="add">
                    <model behaviour="inline">
            <param name="content" value="let $userLang := replace($parameters?language, '([^-]+)-?.*$', '$1') let $langs :=   for $lang in (@mainLang, tokenize(@otherLangs, '\s+'))   return     doc($global:data-root || &#34;/languages.xml&#34;)//*:languages[@xml:lang=$userLang]/*:lang[@code=$lang] return   string-join($langs, ', ')"/>
        </model>
                </elementSpec>
                <elementSpec ident="listBibl" mode="change">
                    <modelSequence predicate="@type='previousEditions'">
            <model behaviour="heading">
                <param name="level" value="2"/>
                <pb:template xmlns="" xml:space="preserve"><pb-i18n key="form.previous-editions"/></pb:template>
            </model>
            <model behaviour="block"/>
        </modelSequence>
                    <modelSequence predicate="@type='images'">
            <model behaviour="heading">
                <param name="level" value="2"/>
                <pb:template xmlns="" xml:space="preserve"><pb-i18n key="form.images-dps"/></pb:template>
            </model>
            <model behaviour="block"/>
        </modelSequence>
                    <modelSequence predicate="@type='bibliography'">
            <model behaviour="heading">
                <param name="level" value="2"/>
                <pb:template xmlns="" xml:space="preserve"><pb-i18n key="form.bibliography">Bibliographie</pb-i18n></pb:template>
            </model>
            <model behaviour="block"/>
        </modelSequence>
                    <model predicate="bibl" behaviour="list"/>
                    <model behaviour="block"/>
                </elementSpec>
            <elementSpec ident="place" mode="add">
                    <model behaviour="pass-through">
            <param name="content" value="(placeName[@type='ancient'], placeName[@type='modern'], placeName[@type='findspot'])"/>
        </model>
                </elementSpec>
                <elementSpec ident="placeName" mode="add">
                    <model behaviour="inline"/>
                </elementSpec>
            <elementSpec ident="date" mode="change">
                    <model predicate="ancestor::note[@type='verification'] and @when" behaviour="inline">
            <param name="content" value="@when/string()"/>
        </model>
                    <model output="web" predicate="@when" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="@when"/>
        </model>
                    <model predicate="text()" behaviour="inline"/>
                    <model behaviour="omit">
            <desc>Leere Date ignorieren</desc>
        </model>
                </elementSpec>
                <elementSpec ident="persName" mode="change">
                    <model predicate="parent::person" behaviour="inline">
            <param name="content" value="string-join((name[@type='praenomen'], name[@type='nomen'], name[@type='cognomen']), ' ')"/>
        </model>
                    <model predicate="not(text())" behaviour="omit"/>
                    <model predicate="ancestor::note[@type='verification']" behaviour="inline"/>
                    <model behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="let $key := @key return collection($global:people)/id($key)"/>
        </model>
                </elementSpec>
                <elementSpec ident="ref" mode="change">
                    <model predicate="@type='biblio'" behaviour="inline">
            <param name="alternate" value="let $target := id(@target, root(.))/ptr/@target return    'https://api.zotero.org/groups/2519759/items/top?format=bib&amp;amp;tag=' || $target || '&amp;amp;style=digital-humanities-im-deutschsprachigen-raum&amp;amp;linkwrap=1'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover class="bibl" remote="[[alternate]]">
  <span slot="default">[[content]]</span>
</pb-popover></pb:template>
        </model>
                    <model predicate="@target" behaviour="link">
            <param name="uri" value="@target"/>
        </model>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
            <elementSpec ident="person" mode="add"/>
                <elementSpec ident="name" mode="add"/>
            </schemaSpec>
        </body>
    </text>
</TEI>