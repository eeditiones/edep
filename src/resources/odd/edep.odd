<?xml-model href="teipublisher_odds.xsd"?><?teipublisher output="web print"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>EDEp</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017
                        <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by
                    <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="edep.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2022-08-14Z">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="edep" source="teipublisher.odd">
                <elementSpec ident="titleStmt" mode="change">
                    <model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model>
                    <model output="fo" behaviour="heading"/>
                    <model predicate="$parameters?mode='title'" behaviour="heading">
            <param name="content" value="title[not(@type)]"/>
            <param name="level" value="5"/>
        </model>
                    <modelSequence output="web" predicate="$parameters?header='short'">
            <model predicate="title/node()" behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="'edit.html?collection=' || substring-after(util:collection-name(.), '/db/apps/edep-data/') || '&amp;amp;id=' || root(.)//teiHeader//idno[@type='EDEp']"/>
            </model>
            <model predicate="not(title/node())" behaviour="link">
                <param name="content" value="$parameters?doc"/>
                <param name="uri" value="'edit.html?id=' || root(.)//teiHeader//idno[@type='EDEp']"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="author"/>
            </model>
        </modelSequence>
                    <model output="web" behaviour="block"/>
                </elementSpec>
            <elementSpec ident="TEI" mode="change">
                    <model predicate="@type='about'" behaviour="inline">
            <param name="content" value="text/body/div[starts-with($parameters?language, @xml:lang)]"/>
        </model>
                    <model behaviour="document"/>
                </elementSpec>
                <elementSpec ident="ex" mode="change">
                    <model behaviour="inline">
            <param name="content" value="if (./@cert='low')  then ('(',., '?)') else ('(',., ')')"/>
        </model>
                </elementSpec>
                <elementSpec ident="persName" mode="add">
                    <model behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="collection('/db/apps/edep-data/people')/id(@key)"/>
        </model>
                </elementSpec>
            <elementSpec ident="expan" mode="change">
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="ab" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="&#34;sic&#34;" behaviour="inline">
            <param name="inside" value="."/>
            <param name="content" value="&#34;(!)&#34;"/>
            <outputRendition xml:space="preserve">
            color:red;
            </outputRendition>
        </model>
                    <model behaviour="note">
            <param name="place" value="@place"/>
            <param name="label" value="@n"/>
            <outputRendition xml:space="preserve">
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="supplied" mode="change">
                    <model predicate="following-sibling::node()[1][name()='gap'][@reason=&#34;lost&#34;]" behaviour="inline">
            <param name="content" value="if (./@cert=&#34;low&#34;)  then (&#34;[&#34;,., &#34;? ---]&#34;) else (&#34;[&#34;,., &#34; ---]&#34;)"/>
        </model>
                    <model predicate="preceding-sibling::node()[1][name()='gap'][@reason=&#34;lost&#34;]" behaviour="inline">
            <param name="content" value="if (./@cert=&#34;low&#34;)  then (&#34;[--- &#34;,., &#34;?]&#34;) else (&#34;[--- &#34;,., &#34;]&#34;)"/>
        </model>
                    <model predicate="@reason=&#34;lost&#34;" behaviour="inline">
            <param name="content" value="if (./@cert=&#34;low&#34;)  then (&#34;[&#34;,. , &#34;?]&#34;) else (&#34;[&#34;,. , &#34;]&#34;)"/>
        </model>
                    <model predicate="parent::choice" behaviour="inline"/>
                    <model predicate="@reason='damage'" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:"&lt;";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:"&gt;";
            </outputRendition>
        </model>
                    <model predicate="@reason='illegible' or not(@reason)" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:"[";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:"]";
            </outputRendition>
        </model>
                    <model predicate="@reason='omitted'" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:"(";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:")";
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:"{";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:"}";
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="lb" mode="change">
                    <model predicate="not(preceding-sibling::lb)" behaviour="omit"/>
                    <modelSequence predicate="@break=&#34;no&#34;">
            <model behaviour="inline">
                <param name="content" value="'-'"/>
            </model>
            <model behaviour="break">
                <param name="type" value="'line'"/>
                <param name="label" value="@n"/>
            </model>
        </modelSequence>
                    <model behaviour="break" useSourceRendition="true">
            <param name="type" value="'line'"/>
            <param name="label" value="@n"/>
        </model>
                </elementSpec>
                <elementSpec ident="del" mode="change">
                    <model behaviour="inline">
            <param name="content" value="('[[', ., ']]')"/>
        </model>
                </elementSpec>
                <elementSpec ident="gap" mode="change">
                    <model predicate="preceding-sibling::node()[1][name()='supplied'][@reason=&#34;lost&#34;]" behaviour="inline"/>
                    <model predicate="following-sibling::node()[1][name()='supplied'][@reason=&#34;lost&#34;]" behaviour="inline"/>
                    <model predicate="desc" behaviour="inline">
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
                    <model predicate="@extent" behaviour="inline">
            <param name="content" value="if (@extent = 'unknown') then '?' else @extent"/>
            <outputRendition xml:space="preserve" scope="before">
            content: '[..';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '..]';
            </outputRendition>
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content: '[...]';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="surplus" mode="add"/>
            <elementSpec ident="abbr" mode="change">
                    <model predicate="parent::expan" behaviour="inline"/>
                    <model behaviour="inline">
            <param name="content" value="(., '(---)')"/>
        </model>
                </elementSpec>
                <elementSpec ident="text()" mode="add">
                    <model predicate="following-sibling::lb[@break=&#34;no&#34;]" behaviour="text">
            <param name="content" value="replace(., '[\s\n]+$', '')"/>
        </model>
                    <model behaviour="text"/>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>