<schemaSpec xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" source="teipublisher.odd">
    <title>EDEp</title>
    <rendition source="edep.css"/>

    <elementSpec ident="TEI" mode="change">
        <model predicate="@type='about'" behaviour="inline">
            <param name="content" value="text/body/div[starts-with($parameters?language, @xml:lang)]"/>
        </model>
        <model behaviour="document"/>
    </elementSpec>
    <elementSpec ident="ab" mode="change">
        <model behaviour="block"/>
    </elementSpec>
    <elementSpec ident="abbr" mode="change">
        <model predicate="parent::expan" behaviour="inline"/>
        <model behaviour="inline">
            <param name="content" value="(., '(---)')"/>
        </model>
    </elementSpec>
    <elementSpec ident="del" mode="change">
        <model behaviour="inline">
            <param name="content" value="('[[', ., ']]')"/>
        </model>
    </elementSpec>
    <elementSpec ident="ex" mode="change">
        <model behaviour="inline">
            <param name="content" value="if (./@cert='low')  then ('(',., '?)') else ('(',., ')')"/>
        </model>
    </elementSpec>
    <elementSpec ident="expan" mode="change">
        <model behaviour="inline"/>
    </elementSpec>
    <elementSpec ident="gap" mode="change">
        <model predicate="preceding-sibling::node()[1][name()='supplied'][@reason=&quot;lost&quot;]" behaviour="inline"/>
        <model predicate="following-sibling::node()[1][name()='supplied'][@reason=&quot;lost&quot;]" behaviour="inline"/>
        <model predicate="@unit='line'" behaviour="inline">
            <param name="content" value="'[- - - - - -]'"/>
        </model>
        <model predicate="@extent" behaviour="inline">
            <param name="content" value="'[- - -]'"/>
        </model>
        <model behaviour="inline">
            <param name="content" value="'[- - -]'"/>
        </model>
    </elementSpec>
    <elementSpec ident="lb" mode="change">
        <model predicate="not(preceding-sibling::lb)" behaviour="omit"/>
        <modelSequence predicate="@break=&quot;no&quot;">
            <model behaviour="inline">
                <param name="content" value="'-'"/>
            </model>
            <model behaviour="break">
                <param name="type" value="'line'"/>
                <param name="label" value="@n"/>
            </model>
        </modelSequence>
        <model behaviour="break" useSourceRendition="true">
            <param name="type" value="'line'"/>
            <param name="label" value="@n"/>
        </model>
    </elementSpec>
    <elementSpec ident="note" mode="change">
        <model predicate="&quot;sic&quot;" behaviour="inline">
            <param name="inside" value="."/>
            <param name="content" value="&quot;(!)&quot;"/>
            <outputRendition xml:space="preserve" >
            color:red;
            </outputRendition>
        </model>
        <model behaviour="note">
            <param name="place" value="@place"/>
            <param name="label" value="@n"/>
            <outputRendition xml:space="preserve" >
            
            </outputRendition>
        </model>
    </elementSpec>
    <elementSpec ident="persName" mode="add">
        <model behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="collection('/db/apps/edep-data/people')/id(@key)"/>
        </model>
    </elementSpec>
    <elementSpec ident="supplied" mode="change">
        <model predicate="following-sibling::node()[1][name()='gap'][@reason=&quot;lost&quot;]" behaviour="inline">
            <param name="content" value="if (./@cert=&quot;low&quot;)  then (&quot;[&quot;,., &quot;? ---]&quot;) else (&quot;[&quot;,., &quot; ---]&quot;)"/>
        </model>
        <model predicate="preceding-sibling::node()[1][name()='gap'][@reason=&quot;lost&quot;]" behaviour="inline">
            <param name="content" value="if (./@cert=&quot;low&quot;)  then (&quot;[--- &quot;,., &quot;?]&quot;) else (&quot;[--- &quot;,., &quot;]&quot;)"/>
        </model>
        <model predicate="@reason=&quot;lost&quot;" behaviour="inline">
            <param name="content" value="if (./@cert=&quot;low&quot;)  then (&quot;[&quot;,. , &quot;?]&quot;) else (&quot;[&quot;,. , &quot;]&quot;)"/>
        </model>
        <model predicate="parent::choice" behaviour="inline"/>
        <model predicate="@reason='damage'" behaviour="inline">
            <param name="content" value="if (./@cert=&quot;low&quot;)  then (&quot;[&quot;,. , &quot;?]&quot;) else (&quot;[&quot;,. , &quot;]&quot;)"/>
        </model>
        <model predicate="@reason='illegible' or not(@reason)" behaviour="inline">
            <param name="content" value="if (./@cert=&quot;low&quot;)  then (&quot;[&quot;,. , &quot;?]&quot;) else (&quot;[&quot;,. , &quot;]&quot;)"/>
        </model>
        <model predicate="@reason='omitted'" behaviour="inline">
            <param name="content" value="if (./@cert=&quot;low&quot;)  then (&quot;&lt;&quot;,. , &quot;?&gt;&quot;) else (&quot;&lt;&quot;,. , &quot;&gt;&quot;)"/>
        </model>
        <model behaviour="inline">
            <outputRendition xml:space="preserve"  scope="before">
            content:&quot;{&quot;;
            </outputRendition>
            <outputRendition xml:space="preserve"  scope="after">
            content:&quot;}&quot;;
            </outputRendition>
        </model>
    </elementSpec>
    <elementSpec ident="text()" mode="add">
        <model predicate="following-sibling::lb[@break=&quot;no&quot;]" behaviour="text">
            <param name="content" value="replace(., '[\s\n]+$', '')"/>
        </model>
        <model behaviour="text"/>
    </elementSpec>
    <elementSpec ident="titleStmt" mode="change">
        <model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model>
        <model output="fo" behaviour="heading"/>
        <model predicate="$parameters?mode='title'" behaviour="heading">
            <param name="content" value="title[not(@type)]"/>
            <param name="level" value="5"/>
        </model>
        <modelSequence output="web" predicate="$parameters?header='short'">
            <model predicate="title/node()" behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="substring-after(util:collection-name(.), '/db/apps/edep-data/') || '/' || root(.)//teiHeader//idno[@type='EDEp'] || '.xml?odd=edep-edition'"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="author"/>
            </model>
            <model behaviour="link">
                <param name="content" value="'View'"/>
                <param name="uri" value="$parameters?doc || '?odd=edep-edition'"/>
            </model>
        </modelSequence>
        <model output="web" behaviour="block"/>
    </elementSpec>
    <elementSpec ident="unclear" mode="change">
        <model behaviour="inline">
            <param name="content" value="codepoints-to-string(string-to-codepoints(.) ! (., 803))"/>
        </model>
    </elementSpec>
</schemaSpec>
